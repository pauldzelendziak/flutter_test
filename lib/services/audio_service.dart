import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:flutter_test_task/services/storage_service.dart';

class AudioService with WidgetsBindingObserver {
  static final AudioService _instance = AudioService._internal();
  factory AudioService() => _instance;
  AudioService._internal();

  late AudioPlayer _backgroundMusicPlayer;

  bool _isMusicEnabled = true;
  bool _isSoundEnabled = true;
  bool _isInitialized = false;
  bool _wasMusicPlayingBeforePause = false;
  double _currentMusicVolume = 0.5;
  double _currentSoundVolume = 0.5;
  bool get isMusicEnabled => _isMusicEnabled;
  bool get isSoundEnabled => _isSoundEnabled;
  double get currentMusicVolume => _currentMusicVolume;
  double get currentSoundVolume => _currentSoundVolume;

  Future<void> initialize() async {
    print('üéµ –ü–æ—á–∞—Ç–æ–∫ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—ó AudioService...');

    if (_isInitialized) {
      print('‚úÖ AudioService –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    await StorageService().initialize();

    final audioSettings = StorageService().loadAudioSettings();
    _isMusicEnabled = audioSettings['musicEnabled'];
    _isSoundEnabled = audioSettings['soundEnabled'];
    _currentMusicVolume = audioSettings['musicVolume'];
    _currentSoundVolume = audioSettings['musicVolume'];
    _backgroundMusicPlayer = AudioPlayer();

    await _backgroundMusicPlayer.setReleaseMode(ReleaseMode.loop);

    await _backgroundMusicPlayer.setPlayerMode(PlayerMode.mediaPlayer);

    try {
      await AudioPlayer.global.setAudioContext(
        AudioContext(
          iOS: AudioContextIOS(
            category: AVAudioSessionCategory.playback,
            options: {
              AVAudioSessionOptions.mixWithOthers,
              AVAudioSessionOptions.duckOthers,
            },
          ),
          android: AudioContextAndroid(
            isSpeakerphoneOn: true,
            stayAwake: true,
            contentType: AndroidContentType.music,
            usageType: AndroidUsageType.game,
            audioFocus: AndroidAudioFocus.gainTransientMayDuck,
          ),
        ),
      );
      print('‚úÖ –ê—É–¥—ñ–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –∞—É–¥—ñ–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É: $e');
    }
    WidgetsBinding.instance.addObserver(this);

    await _backgroundMusicPlayer.setVolume(_currentMusicVolume);

    _isInitialized = true;
    print('‚úÖ AudioService —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ —É—Å–ø—ñ—à–Ω–æ');
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    print('üîÑ –ó–º—ñ–Ω–∞ —Å—Ç–∞–Ω—É –¥–æ–¥–∞—Ç–∫–∞: $state');

    switch (state) {
      case AppLifecycleState.paused:
      case AppLifecycleState.detached:
      case AppLifecycleState.hidden:
        _handleAppPause();
        break;
      case AppLifecycleState.resumed:
        _handleAppResume();
        break;
      case AppLifecycleState.inactive:
        break;
    }
  }

  void _handleAppPause() {
    print('‚è∏Ô∏è –î–æ–¥–∞—Ç–æ–∫ –∑–≥–æ—Ä–Ω—É—Ç–æ - –∑—É–ø–∏–Ω—è—î–º–æ —Ñ–æ–Ω–æ–≤—É –º—É–∑–∏–∫—É');

    _wasMusicPlayingBeforePause = _isMusicEnabled && _isInitialized;

    if (_isInitialized) {
      pauseBackgroundMusic();
    }
  }

  void _handleAppResume() {
    print('‚ñ∂Ô∏è –î–æ–¥–∞—Ç–æ–∫ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ');

    if (_wasMusicPlayingBeforePause && _isMusicEnabled && _isInitialized) {
      print('üéµ –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–Ω–æ–≤—É –º—É–∑–∏–∫—É');
      playBackgroundMusic();
    }
  }

  Future<void> playBackgroundMusic() async {
    print('üéµ –°–ø—Ä–æ–±–∞ –∑–∞–ø—É—Å–∫—É —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏...');

    if (!_isInitialized) {
      print('‚ùå AudioService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    if (!_isMusicEnabled) {
      print('‚ùå –§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞ –≤–∏–º–∫–Ω–µ–Ω–∞');
      return;
    }

    try {
      print('üéµ –ó–∞–ø—É—Å–∫–∞—î–º–æ sounds/backgroundmusic.mp3...');
      await _backgroundMusicPlayer.play(
        AssetSource('sounds/backgroundmusic.mp3'),
      );
      print('‚úÖ –§–æ–Ω–æ–≤–∞ –º—É–∑–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞');
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏: $e');
    }
  }

  Future<void> stopBackgroundMusic() async {
    if (!_isInitialized) return;

    try {
      await _backgroundMusicPlayer.stop();
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏: $e');
    }
  }

  Future<void> pauseBackgroundMusic() async {
    if (!_isInitialized) return;

    try {
      await _backgroundMusicPlayer.pause();
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –ø–∞—É–∑–∏ —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏: $e');
    }
  }

  Future<void> resumeBackgroundMusic() async {
    if (!_isInitialized) return;

    try {
      await _backgroundMusicPlayer.resume();
    } catch (e) {
      print('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–Ω–æ–≤–ª–µ–Ω–Ω—è —Ñ–æ–Ω–æ–≤–æ—ó –º—É–∑–∏–∫–∏: $e');
    }
  }

  Future<void> playClickSound() async {
    print('üîä –°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∫–ª—ñ–∫—É...');

    if (!_isInitialized) {
      print('‚ùå AudioService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    if (!_isSoundEnabled) {
      print('‚ùå –ó–≤—É–∫–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ');
      return;
    }

    try {
      print('üîä –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–ª–µ—î—Ä –¥–ª—è –∑–≤—É–∫—É –∫–ª—ñ–∫—É...');
      final clickPlayer = AudioPlayer();

      await clickPlayer.setVolume(_currentSoundVolume);

      print('üîä –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è sounds/click.mp3...');
      await clickPlayer.play(AssetSource('sounds/click.mp3'));

      print('‚úÖ –ó–≤—É–∫ –∫–ª—ñ–∫—É –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

      clickPlayer.onPlayerComplete.listen((event) {
        print('üîä –ó–≤—É–∫ –∫–ª—ñ–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏');
        clickPlayer.dispose();
      });
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è –∑–≤—É–∫—É –∫–ª—ñ–∫—É: $e');
    }
  }

  Future<void> playPopSound() async {
    print('üîä –°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è pop –∑–≤—É–∫—É...');

    if (!_isInitialized) {
      print('‚ùå AudioService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    if (!_isSoundEnabled) {
      print('‚ùå –ó–≤—É–∫–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ');
      return;
    }

    try {
      print('üîä –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–ª–µ—î—Ä –¥–ª—è pop –∑–≤—É–∫—É...');
      final popPlayer = AudioPlayer();

      await popPlayer.setVolume(_currentSoundVolume);

      print('üîä –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è sounds/pop.mp3...');
      await popPlayer.play(AssetSource('sounds/pop.mp3'));

      print('‚úÖ Pop –∑–≤—É–∫ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

      popPlayer.onPlayerComplete.listen((event) {
        print('üîä Pop –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏');
        popPlayer.dispose();
      });
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è pop –∑–≤—É–∫—É: $e');
    }
  }

  Future<void> playBreakingSound() async {
    print('üîä –°–ø—Ä–æ–±–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è breaking –∑–≤—É–∫—É...');

    if (!_isInitialized) {
      print('‚ùå AudioService –Ω–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∏–π');
      return;
    }

    if (!_isSoundEnabled) {
      print('‚ùå –ó–≤—É–∫–∏ –≤–∏–º–∫–Ω–µ–Ω—ñ');
      return;
    }

    try {
      print('üîä –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π –ø–ª–µ—î—Ä –¥–ª—è breaking –∑–≤—É–∫—É...');
      final breakingPlayer = AudioPlayer();

      await breakingPlayer.setVolume(_currentSoundVolume);

      print('üîä –ó–∞–ø—É—Å–∫–∞—î–º–æ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è sounds/breaking.mp3...');
      await breakingPlayer.play(AssetSource('sounds/breaking.mp3'));

      print('‚úÖ Breaking –∑–≤—É–∫ –∑–∞–ø—É—â–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ');

      breakingPlayer.onPlayerComplete.listen((event) {
        print('üîä Breaking –∑–≤—É–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∑–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏');
        breakingPlayer.dispose();
      });
    } catch (e) {
      print('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥—Ç–≤–æ—Ä–µ–Ω–Ω—è breaking –∑–≤—É–∫—É: $e');
    }
  }

  void toggleMusic() {
    _isMusicEnabled = !_isMusicEnabled;
    _saveAudioSettings();
    if (_isMusicEnabled) {
      playBackgroundMusic();
    } else {
      pauseBackgroundMusic();
    }
  }

  void toggleSound() {
    _isSoundEnabled = !_isSoundEnabled;
    _saveAudioSettings();
    print('üîä –ó–≤—É–∫–∏ ${_isSoundEnabled ? "—É–≤—ñ–º–∫–Ω–µ–Ω–æ" : "–≤–∏–º–∫–Ω–µ–Ω–æ"}');
  }

  void setMusicVolume(double volume) {
    if (!_isInitialized) return;

    _currentMusicVolume = volume.clamp(0.0, 1.0);
    _currentSoundVolume = volume.clamp(0.0, 1.0);
    _backgroundMusicPlayer.setVolume(_currentMusicVolume);
    _saveAudioSettings();
    print('üéµ –ì—É—á–Ω—ñ—Å—Ç—å –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${(_currentMusicVolume * 100).round()}%');
  }

  void setSoundVolume(double volume) {}

  void _saveAudioSettings() {
    if (!_isInitialized) return;

    StorageService().saveAudioSettings(
      musicEnabled: _isMusicEnabled,
      soundEnabled: _isSoundEnabled,
      musicVolume: _currentMusicVolume,
    );
  }

  Future<void> dispose() async {
    if (!_isInitialized) return;

    print('üóëÔ∏è –ó–≤—ñ–ª—å–Ω—è—î–º–æ —Ä–µ—Å—É—Ä—Å–∏ AudioService...');

    WidgetsBinding.instance.removeObserver(this);

    await _backgroundMusicPlayer.dispose();
    _isInitialized = false;

    print('‚úÖ AudioService –æ—á–∏—â–µ–Ω–æ');
  }
}
