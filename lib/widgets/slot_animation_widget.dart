import 'package:flutter/material.dart';
import 'package:flame/game.dart';
import 'package:flutter_test_task/animations/slot_animation.dart';

class SlotAnimationWidget extends StatefulWidget {
  final Function(List<List<String>>)? onAnimationComplete;
  final Function(Map<String, int>)? onWinningsFound;
  final Function(List<String>)? onMultipliersFound;
  final Function()? onSpinComplete;
  final Function(double, String)? onBuyFeatureComplete;
  final Function(double)? onBuyFeatureWinAccumulate;
  final Function(SlotAnimationGame)? onGameReady;
  final Function(int)? onScatterCallback;
  final Function(int)?
  onBuyFeatureSpinsUpdate; // –ù–æ–≤–∏–π callback –¥–ª—è –æ–Ω–æ–≤–ª–µ–Ω–Ω—è –ª—ñ—á–∏–ª—å–Ω–∏–∫–∞ —Å–ø—ñ–Ω—ñ–≤
  final bool shouldAnimate;
  final bool shouldBuyFeature;

  const SlotAnimationWidget({
    super.key,
    this.onAnimationComplete,
    this.onWinningsFound,
    this.onMultipliersFound,
    this.onSpinComplete,
    this.onBuyFeatureComplete,
    this.onBuyFeatureWinAccumulate,
    this.onGameReady,
    this.onScatterCallback,
    this.onBuyFeatureSpinsUpdate,
    this.shouldAnimate = false,
    this.shouldBuyFeature = false,
  });

  @override
  State<SlotAnimationWidget> createState() => _SlotAnimationWidgetState();
}

class _SlotAnimationWidgetState extends State<SlotAnimationWidget> {
  late SlotAnimationGame game;
  bool hasAnimated = false;
  bool hasBuyFeatureActivated = false;

  SlotAnimationGame get animationGame => game;
  @override
  void initState() {
    super.initState();
    game = SlotAnimationGame();

    game.onWinningsCallback = widget.onWinningsFound;
    game.onMultipliersCallback = widget.onMultipliersFound;
    game.onSpinCompleteCallback = widget.onSpinComplete;
    game.onBuyFeatureComplete = (totalWin, winType) {
      // –°–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è buy feature
      hasBuyFeatureActivated = false;
      print('üéÅ Buy feature –∑–∞–≤–µ—Ä—à–µ–Ω–æ, —Å–∫–∏–¥–∞—î–º–æ hasBuyFeatureActivated');

      // –í–∏–∫–ª–∏–∫–∞—î–º–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–∏–π callback —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ –≤—ñ–¥–∂–µ—Ç —â–µ –∑–º–æ–Ω—Ç–æ–≤–∞–Ω–∏–π
      if (mounted && widget.onBuyFeatureComplete != null) {
        widget.onBuyFeatureComplete!(totalWin, winType);
      } else {
        print(
          '‚ö†Ô∏è Buy feature –∑–∞–≤–µ—Ä—à–µ–Ω–æ, –∞–ª–µ –≤—ñ–¥–∂–µ—Ç –≤–∂–µ –∑–Ω–∏—â–µ–Ω–∏–π - callback –ø—Ä–æ–ø—É—â–µ–Ω–æ',
        );
      }
    };
    print(
      'üéØ onBuyFeatureComplete –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${widget.onBuyFeatureComplete != null}',
    );
    game.onScatterCallback = widget.onScatterCallback;
    game.onBuyFeatureSpinsUpdate = widget.onBuyFeatureSpinsUpdate;

    game.onBuyFeatureWinAccumulate = (winAmount) {
      game.addToBuyFeatureWin(winAmount);
      if (mounted && widget.onBuyFeatureWinAccumulate != null) {
        widget.onBuyFeatureWinAccumulate!(winAmount);
      }
    };

    if (widget.onGameReady != null) {
      widget.onGameReady!(game);
    }

    // –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å
    game.setAnimationSettings(useQuick: true, speedMultiplier: 2.0);
  }

  @override
  void didUpdateWidget(SlotAnimationWidget oldWidget) {
    super.didUpdateWidget(oldWidget);

    // –ó–∞–≤–∂–¥–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω—É —à–≤–∏–¥–∫—ñ—Å—Ç—å
    game.setAnimationSettings(useQuick: true, speedMultiplier: 2.0);

    if (widget.shouldBuyFeature && !hasBuyFeatureActivated) {
      print('üéÅ shouldBuyFeature=true, –∑–∞–ø—É—Å–∫–∞—î–º–æ buy feature');
      hasBuyFeatureActivated = true;
      _startBuyFeature();
    } else if (!widget.shouldBuyFeature) {
      print('üéÅ shouldBuyFeature=false, —Å–∫–∏–¥–∞—î–º–æ hasBuyFeatureActivated');
      hasBuyFeatureActivated = false;
    }

    if (widget.shouldAnimate && !hasAnimated) {
      hasAnimated = true;
      _startAnimation();
    } else if (!widget.shouldAnimate) {
      hasAnimated = false;
    }
  }

  Future<void> _startBuyFeature() async {
    print(
      'üéÅ _startBuyFeature –≤–∏–∫–ª–∏–∫–∞–Ω–æ, hasBuyFeatureActivated=$hasBuyFeatureActivated',
    );
    await Future.delayed(
      const Duration(milliseconds: 50),
    ); // –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–æ –∑ 100 –¥–æ 50ms
    await game.activateBuyFeature();

    if (widget.onAnimationComplete != null) {
      final currentGrid = game.getCurrentGrid();
      widget.onAnimationComplete!(currentGrid);
    }
  }

  Future<void> _startAnimation() async {
    await Future.delayed(
      const Duration(milliseconds: 50),
    ); // –ü—Ä–∏—Å–∫–æ—Ä–µ–Ω–æ –∑ 100 –¥–æ 50ms
    await game.startSpinAnimation();

    if (widget.onAnimationComplete != null) {
      final currentGrid = game.getCurrentGrid();
      widget.onAnimationComplete!(currentGrid);
    }
  }

  void resetFlags() {
    print('üéÅ –°–∫–∏–¥–∞–Ω–Ω—è –ø—Ä–∞–ø–æ—Ä—ñ–≤ –∞–Ω—ñ–º–∞—Ü—ñ—ó');
    hasAnimated = false;
    hasBuyFeatureActivated = false;
  }

  @override
  void dispose() {
    print('üéÅ SlotAnimationWidget dispose - —Å–∫–∏–¥–∞—î–º–æ –ø—Ä–∞–ø–æ—Ä–∏');
    hasAnimated = false;
    hasBuyFeatureActivated = false;

    // –û—á–∏—â—É—î–º–æ –≤—Å—ñ callbacks —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –≤–∏–∫–ª–∏–∫—ñ–≤ –ø—ñ—Å–ª—è dispose
    game.onWinningsCallback = null;
    game.onMultipliersCallback = null;
    game.onSpinCompleteCallback = null;
    game.onBuyFeatureComplete = null;
    game.onBuyFeatureWinAccumulate = null;
    game.onScatterCallback = null;
    game.onBuyFeatureSpinsUpdate = null;

    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return ClipRRect(
      borderRadius: BorderRadius.circular(10),
      child: GameWidget(game: game),
    );
  }
}
